package com.acmeplex.model;

import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Column;
import jakarta.persistence.Table;
import java.util.Date;

/**
 * This class represents a Payment entity, which maps to the "Payment" table in the database.
 * It contains information about a payment, such as the payment amount, credit card details, 
 * payment date, and any credits used during the transaction.
 * Author: Riley Koppang
 */
@Entity
@Table(name = "Payment")
public class Payment {

    /*
     * Primary key of the Payment table.
     * The paymentId value will be automatically generated by the database when a new Payment entity is created.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "paymentId", nullable = false)
    private int paymentId;

    /*
     * Column for the amount of the payment.
     * The amount cannot be NULL.
     */
    @Column(name = "amount", nullable = false)
    private double amount;

    /*
     * Column for the credit card number used for the payment.
     * The credit card number cannot be NULL.
     */
    @Column(name = "creditCardNumber", nullable = false)
    private String creditCardNumber;

    /*
     * Column for the name on the credit card used for the payment.
     * The credit card name cannot be NULL.
     */
    @Column(name = "creditCardName", nullable = false)
    private String creditCardName;

    /*
     * Column for the credit card CV (Card Verification) number.
     * The credit card CV cannot be NULL.
     */
    @Column(name = "creditCardCV", nullable = false)
    private String creditCardCV;

    /*
     * Column for the date of the payment.
     * The payment date cannot be NULL.
     */
    @Column(name = "paymentDate", nullable = false)
    private Date paymentDate;

    /*
     * Column for the amount of credits used in the payment.
     * The creditsUsed value cannot be NULL, and it defaults to 0.0 if no credits are used.
     */
    @Column(name = "creditsUsed", nullable = false)
    private Double creditsUsed = 0.0; // Default value

    /*
     * Default constructor required by Hibernate for JPA entities.
     * This constructor is used by Hibernate when creating an instance of the Payment class.
     */
    public Payment() {
    }

    /*
     * Parameterized constructor to create a Payment instance with specific details.
     *
     * @param amount The amount of the payment
     * @param creditCardNumber The credit card number used for the payment
     * @param creditCardName The name on the credit card
     * @param creditCardCV The credit card CV (Card Verification) number
     * @param paymentDate The date the payment was made
     * @param creditsUsed The amount of credits used in the payment (can be zero)
     */
    public Payment(double amount, String creditCardNumber, String creditCardName, String creditCardCV, Date paymentDate, Double creditsUsed) {
        this.amount = amount;
        this.creditCardNumber = creditCardNumber;
        this.creditCardName = creditCardName;
        this.creditCardCV = creditCardCV;
        this.paymentDate = paymentDate;
        this.creditsUsed = creditsUsed;
    }

    /*
     * Gets the payment ID.
     *
     * @return The unique ID for the payment
     */
    public int getPaymentId() {
        return paymentId;
    }

    /*
     * Sets the payment ID.
     *
     * @param paymentId The unique ID for the payment
     */
    public void setPaymentId(int paymentId) {
        this.paymentId = paymentId;
    }

    /*
     * Gets the amount of the payment.
     *
     * @return The payment amount
     */
    public double getAmount() {
        return amount;
    }

    /*
     * Sets the amount of the payment.
     *
     * @param amount The payment amount
     */
    public void setAmount(double amount) {
        this.amount = amount;
    }

    /*
     * Gets the credit card number used for the payment.
     *
     * @return The credit card number
     */
    public String getCreditCardNumber() {
        return creditCardNumber;
    }

    /*
     * Sets the credit card number used for the payment.
     *
     * @param creditCardNumber The credit card number
     */
    public void setCreditCardNumber(String creditCardNumber) {
        this.creditCardNumber = creditCardNumber;
    }

    /*
     * Gets the name on the credit card used for the payment.
     *
     * @return The credit card name
     */
    public String getCreditCardName() {
        return creditCardName;
    }

    /*
     * Sets the name on the credit card used for the payment.
     *
     * @param creditCardName The name on the credit card
     */
    public void setCreditCardName(String creditCardName) {
        this.creditCardName = creditCardName;
    }

    /*
     * Gets the credit card CV (Card Verification) number.
     *
     * @return The credit card CV number
     */
    public String getCreditCardCV() {
        return creditCardCV;
    }

    /*
     * Sets the credit card CV (Card Verification) number.
     *
     * @param creditCardCV The credit card CV number
     */
    public void setCreditCardCV(String creditCardCV) {
        this.creditCardCV = creditCardCV;
    }

    /*
     * Gets the date the payment was made.
     *
     * @return The payment date
     */
    public Date getPaymentDate() {
        return paymentDate;
    }

    /*
     * Sets the date the payment was made.
     *
     * @param paymentDate The payment date
     */
    public void setPaymentDate(Date paymentDate) {
        this.paymentDate = paymentDate;
    }

    /*
     * Gets the amount of credits used in the payment.
     * If no credits were used, this will be 0.0.
     *
     * @return The amount of credits used
     */
    public Double getCreditsUsed() {
        return this.creditsUsed;
    }

    /*
     * Sets the amount of credits used in the payment.
     *
     * @param creditsUsed The amount of credits used
     */
    public void setCreditsUsed(Double creditsUsed) {
        this.creditsUsed = creditsUsed;
    }
}
