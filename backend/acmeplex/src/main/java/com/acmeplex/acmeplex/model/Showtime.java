package com.acmeplex.model;

import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Column;
import jakarta.persistence.Table;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.CascadeType;
import jakarta.persistence.FetchType;
import java.util.Date;
import java.util.List;

/**
 * The Showtime class represents the details of a movie showtime.
 * It maps to the "Showtime" table in the database and includes information about the movie, 
 * showtime date, start and end times, and the seats associated with the showtime.
 * Author: Riley Koppang
 */
@Entity
@Table(name = "Showtime")
public class Showtime {

    /*
     * Primary key for the Showtime table.
     * The showtimeId will be automatically generated by the database when a new Showtime entity is created.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "showtimeId")
    private int showtimeId;

    /*
     * Foreign key to the Movie table.
     * This column links each showtime to the corresponding movie being shown.
     */
    @ManyToOne
    @JoinColumn(name = "movieId", referencedColumnName = "movieId", nullable = false)
    private Movie movie;

    /*
     * Column for the date of the showtime.
     * The showtimeDate cannot be NULL and represents the date the movie is being shown.
     */
    @Column(name = "showtimeDate")
    private java.sql.Date showtimeDate;

    /*
     * Column for the start time of the showtime.
     * The start time cannot be NULL and is represented as a string (in 24-hour format).
     */
    @Column(name = "startTime", nullable = false)
    private String startTime;

    /*
     * Column for the end time of the showtime.
     * The end time cannot be NULL and is represented as a string (in 24-hour format).
     */
    @Column(name = "endTime", nullable = false)
    private String endTime;

    /*
     * One-to-many relationship with Seat.
     * This column represents the seats available for this specific showtime.
     * All seats are loaded lazily (only when accessed) and cascade operations are applied to them.
     */
    @OneToMany(mappedBy = "showtime", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<Seat> seats;

    /*
     * Default constructor required by Hibernate for JPA entities.
     * This constructor is used when the entity is being created by Hibernate.
     */
    public Showtime() {
    }

    /*
     * Parameterized constructor to create a Showtime instance with specific details.
     *
     * @param movie The movie associated with this showtime
     * @param showtimeDate The date of the showtime
     * @param startTime The start time of the showtime
     * @param endTime The end time of the showtime
     */
    public Showtime(Movie movie, java.sql.Date showtimeDate, String startTime, String endTime) {
        this.movie = movie;
        this.showtimeDate = showtimeDate;
        this.startTime = startTime;
        this.endTime = endTime;
    }

    /*
     * Retrieves the unique ID of the showtime.
     *
     * @return The ID of the showtime
     */
    public int getShowtimeId() {
        return showtimeId;
    }

    /*
     * Sets the unique ID of the showtime.
     * This method is used to set the showtimeId manually (usually for updates).
     *
     * @param showtimeId The showtime ID to be set
     */
    public void setShowtimeId(int showtimeId) {
        this.showtimeId = showtimeId;
    }

    /*
     * Retrieves the movie associated with this showtime.
     *
     * @return The movie object linked to this showtime
     */
    public Movie getMovie() {
        return movie;
    }

    /*
     * Sets the movie associated with this showtime.
     *
     * @param movie The movie to be linked to this showtime
     */
    public void setMovie(Movie movie) {
        this.movie = movie;
    }

    /*
     * Retrieves the start time of the showtime.
     *
     * @return The start time of the showtime as a string
     */
    public String getStartTime() {
        return startTime;
    }

    /*
     * Sets the start time of the showtime.
     *
     * @param startTime The start time of the showtime to be set
     */
    public void setStartTime(String startTime) {
        this.startTime = startTime;
    }

    /*
     * Retrieves the end time of the showtime.
     *
     * @return The end time of the showtime as a string
     */
    public String getEndTime() {
        return endTime;
    }

    /*
     * Sets the end time of the showtime.
     *
     * @param endTime The end time of the showtime to be set
     */
    public void setEndTime(String endTime) {
        this.endTime = endTime;
    }

    /*
     * Sets the date of the showtime.
     *
     * @param showtimeDate The date to be set for the showtime
     */
    public void setShowtimeDate(java.sql.Date showtimeDate) {
        this.showtimeDate = showtimeDate;
    }

    /*
     * Retrieves the date of the showtime.
     *
     * @return The date of the showtime
     */
    public java.sql.Date getShowtimeDate() {
        return this.showtimeDate;
    }

    /*
     * Sets the seats available for this showtime.
     *
     * @param seats The list of seats to be associated with the showtime
     */
    public void setSeats(List<Seat> seats) {
        this.seats = seats;
    }

    /*
     * Retrieves the amount of booked seats for this showtime.
     * This method returns the total number of seats assigned to tickets for the showtime.
     *
     * @return The number of booked seats for the showtime
     */
    public int getBookedSeats() {
        return seats.size();
    }
}
