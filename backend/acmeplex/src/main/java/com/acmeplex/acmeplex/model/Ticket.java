package com.acmeplex.model;

import com.acmeplex.model.Seat;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Column;
import jakarta.persistence.Table;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.OneToOne;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.CascadeType;

/**
 * The Ticket class represents a movie ticket purchased by a user.
 * It contains details about the ticket, including its price, purchase date, status, 
 * and the associated movie, showtime, and seats.
 * Author: Riley Koppang
 */
@Entity
@Table(name = "Ticket")
public class Ticket {

    /*
     * Primary key for the Ticket table.
     * The ticketId is auto-generated by the database when a new ticket entity is created.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "ticketId")
    private int ticketId;

    /*
     * Email column of the Ticket table.
     * Stores the email associated with the ticket purchase.
     */
    @Column(name = "email")
    private String email;

    /*
     * Price column of the Ticket table.
     * Stores the price of the ticket.
     */
    @Column(name = "price")
    private double price;

    /*
     * Status column of the Ticket table.
     * Stores the status of the ticket, such as "booked" or "cancelled".
     */
    @Column(name = "status")
    private String status;

    /*
     * Purchase date column of the Ticket table.
     * Stores the date when the ticket was purchased.
     */
    @Column(name = "purchaseDate")
    private Date purchaseDate;

    /*
     * Foreign key to the Movie table.
     * This column associates the ticket with a specific movie.
     */
    @ManyToOne(cascade = CascadeType.PERSIST)  // Cascade persist operation for Movie entity
    @JoinColumn(name = "movieId", referencedColumnName = "movieId", nullable = false)
    private Movie movie;

    /*
     * One-to-many relationship with the Seat entity.
     * This column represents the seats associated with this ticket.
     * A ticket can have one or more seats depending on the booking.
     */
    @OneToMany(mappedBy = "ticket", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<Seat> seats;

    /*
     * Foreign key to the Showtime table.
     * This column associates the ticket with a specific showtime for the movie.
     */
    @ManyToOne
    @JoinColumn(name = "showtimeId", referencedColumnName = "showtimeID", nullable = false)
    private Showtime showtime;

    /*
     * Default constructor required by Hibernate.
     * This is used when the entity is created by Hibernate.
     */
    public Ticket() {
    }

    /*
     * Parameterized constructor for creating a Ticket instance with specified values.
     *
     * @param email The email associated with the ticket
     * @param price The price of the ticket
     * @param status The status of the ticket (e.g., "booked", "cancelled")
     * @param purchaseDate The date when the ticket was purchased
     * @param movie The movie associated with this ticket
     * @param showtime The showtime of the movie this ticket is for
     */
    public Ticket(String email, double price, String status, Date purchaseDate, Movie movie, Showtime showtime) {
        this.email = email;
        this.price = price;
        this.status = status;
        this.purchaseDate = purchaseDate;
        this.movie = movie;
        this.showtime = showtime;
    }

    // Getters and Setters

    /*
     * Retrieves the unique ID of the ticket.
     *
     * @return The ID of the ticket
     */
    public int getTicketId() {
        return ticketId;
    }

    /*
     * Sets the unique ID for the ticket.
     *
     * @param ticketId The ID of the ticket to be set
     */
    public void setTicketId(int ticketId) {
        this.ticketId = ticketId;
    }

    /*
     * Retrieves the email associated with the ticket.
     *
     * @return The email of the ticket holder
     */
    public String getEmail() {
        return email;
    }

    /*
     * Sets the email for the ticket.
     *
     * @param email The email to be associated with the ticket
     */
    public void setEmail(String email) {
        this.email = email;
    }

    /*
     * Retrieves the price of the ticket.
     *
     * @return The price of the ticket
     */
    public double getPrice() {
        return price;
    }

    /*
     * Sets the price for the ticket.
     *
     * @param price The price of the ticket
     */
    public void setPrice(double price) {
        this.price = price;
    }

    /*
     * Retrieves the status of the ticket.
     *
     * @return The status of the ticket (e.g., "booked", "cancelled")
     */
    public String getStatus() {
        return status;
    }

    /*
     * Sets the status of the ticket.
     *
     * @param status The status to be set (e.g., "booked", "cancelled")
     */
    public void setStatus(String status) {
        this.status = status;
    }

    /*
     * Retrieves the purchase date of the ticket.
     *
     * @return The date when the ticket was purchased
     */
    public Date getPurchaseDate() {
        return purchaseDate;
    }

    /*
     * Sets the purchase date of the ticket.
     *
     * @param purchaseDate The date when the ticket was purchased
     */
    public void setPurchaseDate(Date purchaseDate) {
        this.purchaseDate = purchaseDate;
    }

    /*
     * Retrieves the movie associated with this ticket.
     *
     * @return The movie linked to this ticket
     */
    public Movie getMovie() {
        return movie;
    }

    /*
     * Sets the movie associated with this ticket.
     *
     * @param movie The movie to be linked to this ticket
     */
    public void setMovie(Movie movie) {
        this.movie = movie;
    }

    /*
     * Retrieves all seats associated with this ticket.
     *
     * @return The list of seats for this ticket
     */
    public List<Seat> getSeats() {
        return this.seats;
    }

    /*
     * Sets the seats for this ticket.
     *
     * @param seats The list of seats to be associated with this ticket
     */
    public void setSeats(List<Seat> seats) {
        this.seats = seats;
    }

    /*
     * Retrieves the showtime associated with this ticket.
     *
     * @return The showtime of the movie for this ticket
     */
    public Showtime getShowtime() {
        return showtime;
    }

    /*
     * Sets the showtime associated with this ticket.
     *
     * @param showtime The showtime to be linked to this ticket
     */
    public void setShowtime(Showtime showtime) {
        this.showtime = showtime;
    }

}
