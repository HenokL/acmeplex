package com.acmeplex.model;

import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Column;
import java.util.Date;
import java.util.List;

@Entity
public class Showtime {

    /*
     * Primary key of the Showtime table
     * The value of id will be automatically generated by the database when a new Showtime entity is created
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /*
     * startTime column of the Showtime table
     * The start time cannot be NULL
     */
    @Column(nullable = false)
    private Date startTime;

    /*
     * endTime column of the Showtime table
     * The end time cannot be NULL
     */
    @Column(nullable = false)
    private Date endTime;

    /*
     * date column of the Showtime table
     * The date cannot be NULL
     */
    @Column(nullable = false)
    private Date date;

    /*
     * Many-to-one relationship with the Theater entity
     * Each Showtime is associated with one Theater
     */
    @ManyToOne
    @JoinColumn(name = "theater_id", nullable = false)
    private Theater theater;

    /*
     * Many-to-one relationship with the Movie entity
     * Each Showtime is associated with one Movie
     */
    @ManyToOne
    @JoinColumn(name = "movie_id", nullable = false)
    private Movie movie;

    /*
     * One-to-many relationship with the Seat entity
     * Each Showtime can have multiple Seats available
     */
    @OneToMany(mappedBy = "showtime")
    private List<Seat> availableSeats;

    /*
     * Default constructor
     * Hibernate requires a no-arg constructor for JPA entities
     */
    public Showtime() {}

    /*
     * Parameterized constructor
     */
    public Showtime(Date startTime, Date endTime, Date date, Theater theater, Movie movie, List<Seat> availableSeats) {
        this.startTime = startTime;
        this.endTime = endTime;
        this.date = date;
        this.theater = theater;
        this.movie = movie;
        this.availableSeats = availableSeats;
    }

    /*
     * Method to reserve a seat for the showtime
     * This method will mark a seat as reserved in the system
     */
    public void reserveSeat(Seat seat) {
        // Mark the seat as reserved
        seat.reserveSeat();
        // Optionally, you can add additional logic like updating available seats in the showtime or database
    }

    // Getters and setters
    public Long getId() {
        return id;
    }

    public Date getStartTime() {
        return startTime;
    }

    public void setStartTime(Date startTime) {
        this.startTime = startTime;
    }

    public Date getEndTime() {
        return endTime;
    }

    public void setEndTime(Date endTime) {
        this.endTime = endTime;
    }

    public Date getDate() {
        return date;
    }

    public void setDate(Date date) {
        this.date = date;
    }

    public Theater getTheater() {
        return theater;
    }

    public void setTheater(Theater theater) {
        this.theater = theater;
    }

    public Movie getMovie() {
        return movie;
    }

    public void setMovie(Movie movie) {
        this.movie = movie;
    }

    public List<Seat> getAvailableSeats() {
        return availableSeats;
    }

    public void setAvailableSeats(List<Seat> availableSeats) {
        this.availableSeats = availableSeats;
    }

    /*
     * Override toString() for better object representation
     */
    @Override
    public String toString() {
        return "Showtime{id=" + id + ", startTime=" + startTime + ", endTime=" + endTime + ", date=" + date + ", theater=" + theater + ", movie=" + movie + "}";
    }
}
